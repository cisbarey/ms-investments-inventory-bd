<?xml version="1.0" encoding="UTF-8"?>
<!--suppress XmlDefaultAttributeValue -->
<hazelcast-client xmlns="http://www.hazelcast.com/schema/client-config"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://www.hazelcast.com/schema/client-config
                  http://www.hazelcast.com/schema/client-config/hazelcast-client-config-4.2.xsd">
    <!--
        The <client-labels> element lets you define labels in your Java client, similar to the way it can be done for the
        members. Through the client labels, you can assign special roles for your clients and use these roles to perform
        some actions specific to those client connections.
        You can also group your clients using the client labels. These client groups can be blacklisted in the Hazelcast
        Management Center so that they can be prevented from connecting to a cluster. See the related section in the
        Hazelcast Management Center Reference Manual for more information on this topic.
        You can define the labels with the <label> sub-element.
    -->
    <client-labels>
        <label>InvestmentsInventoryBd</label>
    </client-labels>

    <!--
     The <backup-ack-to-client-enabled> element lets you enable/disable backups ack to client.
     This feature reduces number of hops and increase performance for smart clients.
     It is enabled by default for smart clients. This config has no effect for unisocket clients.
    -->
    <backup-ack-to-client-enabled>true</backup-ack-to-client-enabled>

    <!--
        ===== HAZELCAST NETWORK CONFIGURATION =====
        The configuration to build your Hazelcast's network includes configuration for port, interface, discovery
        mechanism, SSL, encryption, etc. The configuration element's name is <network>.
        It has the following sub-elements:
        * <cluster-members>:
            This configuration lets you define the members in your cluster the client is connecting to. The members
            can be configured with the <address> sub-element.
        * <outbound-ports>:
            By default, Hazelcast lets the system pick up an ephemeral port during socket bind operation. But security
            policies/firewalls may require you to restrict outbound ports to be used by Hazelcast-enabled applications.
            You can specify these ports using <ports> under the element <outbound-ports>. You can give a single
            port number, comma separated multiple ports or port ranges. See the example below.
            <outbound-ports>
                <ports>33000-35000</ports>
                <ports>37000,37001,37002,37003</ports>
                <ports>38000,38500-38600</ports>
            </outbound-ports>
        * <smart-routing>:
            If true, client will route the key based operations to owner of the key at the best effort. Note that it
            uses a cached version of com.hazelcast.core.PartitionService#getPartitions() and doesn't guarantee that
            the operation will always be executed on the owner. The cached table is updated every second.
        * <redo-operation>:
            If true, client will redo the operations that were executing on the server and client lost the connection.
            This can be because of network, or simply because the member died. However it is not clear whether the
            application is performed or not. For idempotent operations this is harmless, but for non idempotent ones
            retrying can cause to undesirable effects. Note that the redo can perform on any member. If false, the
            operation will throw a RuntimeException that is wrapping a java.io.IOException.
        * <connection-timeout>:
            Connection timeout is the timeout value in milliseconds for members to accept client connection requests.
            The following are the example configurations. Its default value is 5000.
        * <socket-options>:
            You can configure the network socket options using this setting. It has the following sub-elements:
            - <tcp-no-delay>: Enables/disables the TCP_NODELAY socket option. Its default value is true.
            - <keep-alive>: Enables/disables the SO_KEEPALIVE socket option. Its default value is true.
            - <reuse-address>: Enables/disables the SO_REUSEADDR socket option. Its default value is true.
            - <linger-seconds>:
                Enables/disables SO_LINGER with the specified linger time in seconds.
                Its default value is 3.
            - <buffer-size>:
                Sets the SO_SNDBUF and SO_RCVBUF options to the specified value in KB for this Socket.
                Its default value is 128.
        * <socket-interceptor>:
            Lets you add custom hooks to join and perform connection procedures (like identity checking using
            Kerberos, etc.). This feature is available only in Hazelcast Enterprise. To be able to use it, you
            should first implement SocketInterceptor interface. Its configuration contains the class you
            implemented and socket interceptor properties. By default, it is disabled. The following is an example:
            <socket-interceptor enabled="true">
                <class-name>
                    com.hazelcast.examples.MySocketInterceptor
                </class-name>
                <properties>
                    <property name="kerberos-host">kerb-host-name</property>
                    <property name="kerberos-config-file">kerb.conf</property>
                </properties>
            </socket-interceptor>
        * <ssl>:
            Lets you configure SSL using the SSL context factory. This feature is available only in Hazelcast
            Enterprise. To be able to use it, encryption should NOT be enabled and you should first implement
            your SSLContextFactory class. Its configuration contains the factory class and SSL properties.
            By default, it is disabled. The following is an example:
            <ssl enabled="true">
                <factory-class-name>
                    com.hazelcast.nio.ssl.BasicSSLContextFactory
                </factory-class-name>
                <properties>
                    <property name="keyStore">keyStore</property>
                    <property name="keyStorePassword">keyStorePassword</property>
                    <property name="keyManagerAlgorithm">SunX509</property>
                    <property name="trustManagerAlgorithm">SunX509</property>
                    <property name="protocol">TLS</property>
                    <property name="mutualAuthentication">REQUIRED</property>
                </properties>
            </ssl>
        * <aws>:
            Set its "enabled" attribute to true for cluster discovery within Amazon EC2.
            Please refer to https://github.com/hazelcast/hazelcast-aws/#configuration for the configuration details.
        * <gcp>:
            Set its "enabled" attribute to true for cluster discovery within the Google Cloud Platform.
            Please refer to https://github.com/hazelcast/hazelcast-gcp/#configuration for the configuration details.
        * <azure>:
            Set its "enabled" attribute to true for cluster discovery within Microsoft Azure.
            Please refer to https://github.com/hazelcast/hazelcast-azure/#configuring-at-hazelcast-side for
            the configuration details.
        * <kubernetes>:
            Set its "enabled" attribute to true for cluster discovery in the Kubernetes environment.
            Please refer to https://github.com/hazelcast/hazelcast-kubernetes#hazelcast-configuration for
            the configuration details.
        * <eureka>:
            Set its "enabled" attribute to true for cluster discovery with using Eureka Service Registry.
            Please refer to https://github.com/hazelcast/hazelcast-eureka#hazelcast-configuration for
            the configuration details.
        * <hazelcast-cloud>:
            Set its "enabled" attribute to true for cluster discovery in the Hazelcast Cloud infrastructure. You need to
            define the mandatory <discovery-token> used by the discovery mechanism.
        * <discovery-strategies>:
            Set its "enabled" attribute to true for cluster discovery in various cloud infrastructures. You also need to set the
            value of "hazelcast.discovery.enabled" property to true. See the description of the <properties> element
            to learn how to do this.
            You can define multiple discovery strategies using the <discovery-strategy> sub-element and its
            properties. Please refer to
            http://docs.hazelcast.org/docs/latest/manual/html-single/index.html#discovering-cluster-members
            to see the properties you can use.
            The following is an example for EC2 cloud.
            <discovery-strategies>
                <discovery-strategy class="com.hazelcast.jclouds.JCloudsDiscoveryStrategy" enabled="true">
                <properties>
                    <property name="provider">aws-ec2</property>
                    <property name="identity">AWS_IDENTITY</property>
                    <property name="credential">AWS_CREDENTIAL</property>
                </properties>
                </discovery-strategy>
            </discovery-strategies>
        * <icmp-ping>:
            ICMP can be used in addition to the other detectors. It operates at OSI layer 3 and detects network
            and hardware issues more quickly. This detector needs to be turned on by setting the "enabled" attribute
            to true. It is turned off by default.
            It has the following sub-elements:
            * <timeout-milliseconds>:
                Number of milliseconds until a ping attempt is considered failed if there was no reply.
                Its default value is 1000 milliseconds.
            * <interval-milliseconds>:
                Interval, in milliseconds, between each ping attempt. 1000ms (1 sec) is also the minimum interval allowed.
                Its default value is 1000 milliseconds.
            * <max-attempts>:
                Maximum number of ping attempts before the member gets suspected by the detector. Its default value is 3.
            * <ttl>:
                Maximum number of hops the packets should go through. Its default value is 255. You can set to 0 to use
                your system’s default TTL.
            * <echo-fail-fast-on-startup>:
                Cluster Member will fail to start if it is unable to action an ICMP ping command when ICMP is enabled.
                Failure is usually due to OS level restrictions.
    -->
    <network>
        <cluster-members>
            <address>localhost:5701</address>
            <!--<address>hazelcast-cluster.hazelcast.svc.cluster.local:5701</address-->
        </cluster-members>
        <outbound-ports>
            <ports>34600</ports>
            <ports>34700-34710</ports>
        </outbound-ports>
        <smart-routing>true</smart-routing>
        <redo-operation>true</redo-operation>
        <connection-timeout>60000</connection-timeout>
        <socket-options>
            <tcp-no-delay>false</tcp-no-delay>
            <keep-alive>true</keep-alive>
            <reuse-address>true</reuse-address>
            <linger-seconds>3</linger-seconds>
            <buffer-size>128</buffer-size>
        </socket-options>
        <!--socket-interceptor enabled="true">
            <class-name>com.hazelcast.examples.MySocketInterceptor</class-name>
            <properties>
                <property name="foo">bar</property>
            </properties>
        </socket-interceptor-->
        <kubernetes enabled="false">
            <namespace>hazelcast</namespace>
            <service-name>hazelcast-cluster</service-name>
        </kubernetes>
    </network>

    <!--
        ===== HAZELCAST NEAR CACHE CONFIGURATION =====
        Configuration element's name is <near-cache>.
        It has the following attribute:
        - name: You can give a name for your Near Cache. It is optional and its default value is "default".
        It has the following sub-elements:
            - <time-to-live-seconds>:
                Maximum number of seconds for each entry to stay in the Near Cache. Entries that are older than this
                period are automatically evicted from the Near Cache. Any integer between 0 and Integer.MAX_VALUE.
                0 means infinite. Its default value is 0.
            - <max-idle-seconds>:
                Maximum number of seconds each entry can stay in the Near Cache as untouched (not read). Entries that
                are not read more than this period are removed from the Near Cache. Any integer between 0 and
                Integer.MAX_VALUE. 0 means Integer.MAX_VALUE. Its default value is 0.
             - <invalidate-on-change>:
                Specifies whether the cached entries are evicted when the entries are updated or removed. Its default
                value is true.
            - <in-memory-format>:
                Specifies in which format data will be stored in your Near Cache. Note that a map's in-memory format
                can be different from that of its Near Cache.
                Available values are as follows:
                - BINARY:
                    Data will be stored in serialized binary format. It is the default option.
                - OBJECT:
                    Data will be stored in deserialized form.
                - NATIVE:
                    Data will be stored in the Near Cache that uses Hazelcast's High-Density Memory Store feature.
                    This option is available only in Hazelcast Enterprise HD. Note that a map and its Near Cache
                    can independently use High-Density Memory Store. For example, while your map does not use
                    High-Density Memory Store, its Near Cache can use it.
            - <invalidate-on-change>:
                Specifies whether the cached entries are evicted when the entries are updated or removed.
                Its default value is true.
            - <serialize-keys>:
                Specifies if the keys of a Near Cache entry should be serialized or not. Serializing the keys has
                a big impact on the read performance of the Near Cache. It should just be activated when you have
                mutable keys, which are changed after use for the Near Cache. Its default value is false.
            - <eviction>:
                Configuration for the eviction when the in-memory format of the Near Cache is NATIVE. It has the
                following attributes:
                - size: Maximum size (entry count) of the Near Cache.
                - max-size-policy: Maximum size policy for eviction of the Near Cache. Available values are as follows:
                    * ENTRY_COUNT: Maximum entry count per member.
                    * USED_NATIVE_MEMORY_SIZE: Maximum used native memory size in megabytes.
                    * USED_NATIVE_MEMORY_PERCENTAGE: Maximum used native memory percentage.
                    * FREE_NATIVE_MEMORY_SIZE: Minimum free native memory size to trigger cleanup.
                    * FREE_NATIVE_MEMORY_PERCENTAGE: Minimum free native memory percentage to trigger cleanup.
                - eviction-policy: See the <eviction-policy> element above.
        Note that the Near Cache eviction configuration is different for NATIVE in-memory format.
        Proper eviction configuration example for NATIVE in-memory format :
           `<eviction max-size-policy="USED_NATIVE_MEMORY_SIZE" eviction-policy="LFU" size="60"/>`
    -->
    <near-cache name="ms-investments-inventory-bd-lumina-example">
        <time-to-live-seconds>86400</time-to-live-seconds>
        <max-idle-seconds>100</max-idle-seconds>
        <in-memory-format>OBJECT</in-memory-format>
        <!--invalidate-on-change>true</invalidate-on-change-->
        <!--serialize-keys>true</serialize-keys-->
        <!--local-update-policy>INVALIDATE</local-update-policy-->
        <!--preloader enabled="true" directory="directory" store-initial-delay-seconds="50" store-interval-seconds="10"/-->
    </near-cache>

    <!--near-cache name="NearCacheEvictionConfigExample">
        <eviction eviction-policy="LRU" max-size-policy="ENTRY_COUNT" size="10000"
                  comparator-class-name="com.hazelcast.examples.MyEvictionComparator"/>
    </near-cache-->


    <!--
        ===== HAZELCAST CONNECTION STRATEGY CONFIGURATION =====
        Configuration element's name is <connection-strategy>.
        It has the following attributes:
            - "async-start": If set to true, creating Hazelcast client doesn't not wait for connecting to the cluster.
            - "reconnect-mode": Defines the reconnection mode. The valid values are:
                - "ON":
                    Enables reconnection in a blocking manner where all the waiting invocations are blocked until a
                    cluster connection is established or failed. This is the default value.
                - "OFF": Disables the reconnection.
                - "ASYNC":
                    Enables reconnection in a non-blocking manner where all the waiting invocations receive a
                    HazelcastClientOfflineException.
        It has the <connection-retry> sub-element, defining the configuration used when retrying to connect to the cluster.
        The <connection-retry> element has the following sub-elements:
            * <initial-backoff-millis>:
                Specifies how long to wait (backoff) after the first failure before retrying in milliseconds.
                Its default value is 1000 ms.
            * <max-backoff-millis>: Specifies the upper limit for the backoff in milliseconds. Its default value is 30000 ms.
            * <multiplier>: Factor to multiply the backoff after a failed retry. Its default value is 1.05.
            * <cluster-connect-timeout-millis>: Timeout value in milliseconds for the client to give up to connect to
              the current cluster
              Depending on FailoverConfig, a client can shutdown or start trying on alternative cluster after reaching the timeout.
              Its default value is -1. For the default value, the client will not stop trying to connect to the cluster.
              If the failover client is used, the client will start trying to connect alternative clusters after
              120000 ms. For any other value, both the failover and non-failover client will use that as it is.
            * <jitter>: Specifies by how much to randomize backoffs. Its default value is 0.
    -->
    <connection-strategy async-start="true" reconnect-mode="ASYNC">
        <connection-retry>
            <initial-backoff-millis>2000</initial-backoff-millis>
            <max-backoff-millis>60000</max-backoff-millis>
            <multiplier>3</multiplier>
            <cluster-connect-timeout-millis>5000</cluster-connect-timeout-millis>
            <jitter>0.5</jitter>
        </connection-retry>
    </connection-strategy>

</hazelcast-client>